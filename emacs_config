;; 绕过emacs24.5的tramp导致启动速度非常缓慢的bug
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-strict-syntax-p t)
 '(c-tab-always-indent nil)
 '(column-number-mode t)
 '(custom-safe-themes
   '("d481904809c509641a1a1f1b1eb80b94c58c210145effc2631c1a7f2e4a2fdf4"
     "dfcd2b13f10da4e5e26eb1281611e43a134d4400b06661445e7cbb183c47d2ec"
     "6fc9e40b4375d9d8d0d9521505849ab4d04220ed470db0b78b700230da0a86c1"
     "6bdc4e5f585bb4a500ea38f563ecf126570b9ab3be0598bdf607034bb07a8875"
     "76ddb2e196c6ba8f380c23d169cf2c8f561fd2013ad54b987c516d3cabc00216"
     default))
 '(history-file "~/emacs-history.el")
 '(package-selected-packages
   '(color-theme-sanityinc-tomorrow company find-file-in-project go-mode
				    golden-ratio google-this lsp-java
				    lsp-ui projectile))
 '(standard-indent 8)
 '(tool-bar-mode nil nil (tool-bar))
 '(transient-mark-mode t))

;; apointment enable
(setq appt-issue-message t)

;; line space
(setq-default line-spacing 4)
;;(set-default-fonts "-xos4-terminus-medium-r-normal--16-160-72-72-c-80-iso10646-1")
;(set-frame-font "-bitstream-bitstream vera sans mono-medium-o-normal--0-0-0-0-m-0-iso10646-1")

(setq default-fill-column 120)

;(setq scroll-margin 3
;      scroll-conservatively 10000)

;;no backup file
(setq make-backup-files nil)

(add-hook 'c-mode-hook '(lambda ()(c-set-style "linux")))
(add-hook 'c++-mode-hook 'google-set-c-style)
(add-hook 'lua-mode-hook '(lambda()
			    (setq lua-indent-level 4)
			    (setq-default indent-tabs-mode nil)))

;; keep silent
(setq visible-bell nil)

;; display time
(display-time)

;; key binding
(global-set-key "\M-o" 'other-window)
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-c\C-g" 'goto-line)
(global-set-key "\C-x\C-b" 'bs-show)
;(global-set-key (kbd "C-x C-b") 'ibuffer-list-buffers)
(global-set-key "\M-p"  'bs-cycle-previous)
(global-set-key "\M-n"  'bs-cycle-next)
(global-set-key "\M-a"  'beginning-of-line-text)
; 不再使用speedbar, 似乎没啥用处...
;(global-set-key "\C-c\h"  'speedbar-get-focus)
;(global-set-key "\C-c\i"  'imenu)
(global-set-key "\C-c\C-f"  'grep-find)
(global-set-key "\C-c\l"  'align)
(global-set-key "\C-c\f"  'find-file-at-point)

;; use helm-M-x as default
; (global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
; (global-set-key (kbd "M-/") 'helm-dabbrev)
; (global-set-key (kbd "C-c i") 'helm-imenu)
; (global-set-key (kbd "C-c s") 'helm-do-ag)
(global-set-key (kbd "C-c c") 'company-complete)
(global-set-key (kbd "C-s") 'isearch-forward)
(global-set-key (kbd "C-c p") 'find-file-in-project)
; (global-set-key (kbd "C-c r") 'ffip-ivy-resume)

(setq-default kill-whole-line t)
(setq align-to-tab-stop nil)

;Syntax Highlighting
(cond ((fboundp 'global-font-lock-mode)
;; Load the font-lock package.
(require 'font-lock)
;; Maximum colors
(setq font-lock-maximum-decoration t)
;; Turn on font-lock in all modes that support it
(global-font-lock-mode t)))

;; set lijie path as load-path
(add-to-list 'load-path "~/.lijie" t)
(if (file-exists-p "~/.lijie/google-c-style.el")
    (load "~/.lijie/google-c-style.el"))
; (autoload 'go-mode "go-mode" nil t)
; (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))

;; === lsp-mode start ===
;; (require 'lsp-mode)
;; (define-key lsp-mode-map (kbd "C-c e") lsp-command-map)

(use-package lsp-mode
  :ensure t
  :defer t
  :bind-keymap ("C-c e" . lsp-command-map)
  :hook (go-mode . lsp)
  :init
  (setq lsp-go-gopls-path (executable-find "gopls"))
  (setq lsp-file-watch-ignored
      '("[/\\\\]gen-go-protos$" "[/\\\\]\\.git$")))

;; (require 'lsp-ui)
(use-package lsp-ui
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
;; (require 'go-mode)

(use-package go-mode
  :after lsp)

;; (add-hook 'go-mode-hook #'lsp-deferred)
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(lsp-register-custom-settings
 '(("gopls.completeUnimported" t t)
   ("gopls.staticcheck" t t)))

;; (add-hook 'go-mode-hook 'subword-mode)
;; (add-hook 'before-save-hook 'gofmt-before-save)

;;(add-hook 'go-mode-hook (lambda ()
;;                          (flycheck-add-next-checker 'lsp 'go-vet)
;;                          (flycheck-add-next-checker 'lsp 'go-staticcheck)))
;;
(setq lsp-go-gopls-path (executable-find "gopls"))

;; (require 'lsp-java)
;; (add-hook 'java-mode-hook #'lsp)
;; (setq lsp-java-java-path "/usr/lib/jvm/java-21-openjdk-21.0.8.0.9-1.tl3.x86_64/bin/java")

;; (use-package lsp-java
;;   :after lsp
;;   :hook (java-mode-hook . lsp))

;; === lsp-mode end ===

;; projectile start
(require 'projectile)
(projectile-mode +1)
;; Recommended keymap prefix on macOS
;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
;; Recommended keymap prefix on Windows/Linux
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
;; projectile end
			  
; emacs title
(setq frame-title-format "emacs@%b")

; display column number
(setq column-number-mode t)

; 
(setq inhibit-startup-message t)

;
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;Hightling Marked Area
(transient-mark-mode t)

;Set Default-mode
(setq default-major-mode 'text-mode) 

(setq default-tab-width 8)

(defun set-default-tab-width (size)
  "Set tab size"
  (interactive "nPlease input the tab size:")
  (setq default-tab-width size)
  (message "The tab size is %d" size))

;(setq default-indet-tab-mode nil)
(setq default-indet-tab-mode t)

(defun insert-current_time ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d %H:%M:%S" (current-time))))

;; (defun insert-doxygen ()
;;   (interactive)
;;   (insert "/**\n * \n * \@param \n * \@return \n */")
;;   (previous-line 3))
;; (define-key global-map (kbd "C-c d") 'insert-doxygen)


(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
		     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))
(define-key global-map (kbd "C-c a") 'wy-go-to-char)


;;;;;;;;;;;;;;;;;;;;; move line ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(global-set-key   [C-S-up]        'my-move-line-up)
(global-set-key   [C-S-down]      'my-move-line-down)
(global-set-key   [C-M-down]      'my-dup-line-down)

(global-set-key [C-M-left] (function (lambda()(interactive)
           (enlarge-window 10))))
(global-set-key [C-M-right] (function (lambda()(interactive)
           (enlarge-window-horizontally 10))))

;; copy line
(defun kill-ring-save-current-line ()
  "copy the current non-empty line to the kill-ring"
  (interactive)
  (unless (equal (line-beginning-position) (line-end-position))
    (kill-ring-save (line-beginning-position) (line-end-position))))

;; bind it C-;
(global-set-key [(control \;)] 'kill-ring-save-current-line)
;(define-key global-map (kbd "C-c ;") 'kill-ring-save-current-line)

(defun my-move-region-up (p)
  "move current region up"
  (interactive "p")
  (let ((c (current-column)))
    (beginning-of-line)
    (kill-region )
;    (previous-line p)
 ;   (beginning-of-line)
;    (yank)
;    (previous-line 1)
;    (move-to-column c))

))

(defun my-move-line-up (p)
  "move current line up"
  (interactive "p")
  (let ((c (current-column)))
    (beginning-of-line)
    (kill-line 1)
    (previous-line p)
    (beginning-of-line)
    (yank)
    (previous-line 1)
    (move-to-column c)))

(defun my-move-line-down (p)
  "move current line down"
  (interactive "p")
  (let ((c (current-column)))
    (beginning-of-line)
    (kill-line 1)
    (next-line p)
    (beginning-of-line)
    (yank)
    (previous-line 1)
    (move-to-column c)))

(defun my-dup-line-down ()
  "duplicate this line at next line"
  (interactive)
  (let ((c (current-column)))
    (kill-ring-save-current-line)
    (end-of-line)
    (newline)
    (yank)
    (move-to-column c)))

(defvar ue-selection-last-point nil
  "Indicates whether to kill-append or kill-new")
(defvar ue-selection-total-lines 0
  "Total number of lines appended so far to the last item in kill-ring")

(defun ue-selection-update-cont ()
  "Update `ue-selection-last-point' variable"
  (if (and this-command
           (string= (format "%s" this-command)
                    "ue-select-line-down-continued"))
      (setq ue-selection-last-point (point))
    (setq ue-selection-total-lines 0)
    (setq ue-selection-last-point  nil)))

(add-hook 'post-command-hook 'ue-selection-update-cont)

(defun ue-select-line-down-continued ()
  "like Shift+down in UltraEdit, but do no selection.
;; Just put these continuous lines all toghether as a new item in kill-ring.
;; Messages will appear in minibuffer telling you how many lines were copied.
;; Continuous commands with no interruption append new lines to the item.
;; Any non-ue-select-line-down-continued command will stop gathering new lines
;; and make a new item in kill-ring.

;; post-command-hook is used in detecting the continuity of this command.
;; check `ue-selection-update-cont' and `post-command-hook'."
  (interactive)
  (let ((s (point)))
    (setq next-line-add-newlines t)
    (next-line 1)
    (setq next-line-add-newlines nil)
    (if (and ue-selection-last-point
             (= (save-excursion
                  (when (> (count-lines (point-min) (point)) 1)
                    (previous-line 1))
                  (point))
                ue-selection-last-point))
        (progn
          (kill-append (buffer-substring s (point)) nil)
          (setq ue-selection-total-lines (1+ ue-selection-total-lines))
          (message (format "%s lines copied" ue-selection-total-lines)))
      (kill-new (buffer-substring s (point)))
      (message "1 line copied")
      ;; some errors will cause post-command-hook deletion
      ;; so add-hook every time after we add the first line
      (add-hook 'post-command-hook 'ue-selection-update-cont)
      (setq ue-selection-total-lines 1))))

(defun ue-select-line-down ()
  "like Shift+down in UltraEdit."
  (interactive)
  (let ((s (point)))
  (setq next-line-add-newlines t)
  (next-line 1)
  (setq next-line-add-newlines nil)
  (kill-new (buffer-substring s (point)))))
(global-set-key [(shift down)] 'ue-select-line-down-continued)

(setq calendar-remove-frame-by-deleting t)
(setq calendar-week-start-day 1)            ;
(setq mark-diary-entries-in-calendar t)     ;
(setq mark-holidays-in-calendar t)        ;
(setq view-calendar-holidays-initially nil) ;

(setq christian-holidays nil)
(setq hebrew-holidays nil)
(setq islamic-holidays nil)
(setq solar-holidays nil)
(setq general-holidays '((holiday-float 5 0 2 "Mother's day")
                         (holiday-fixed 6 1 "Children's day")
                         (holiday-float 6 0 3 "Father's day")
                         (holiday-fixed 9 28 "Sunday's birthday")))

;; Support for marking a rectangle of text with highlighting.
(define-key ctl-x-map "r\C-@" 'rm-set-mark)
(define-key ctl-x-map [?r ?\C-\ ] 'rm-set-mark)
(define-key ctl-x-map "r\C-x" 'rm-exchange-point-and-mark)
(define-key ctl-x-map "r\C-w" 'rm-kill-region)
(define-key ctl-x-map "r\M-w" 'rm-kill-ring-save)
(define-key global-map [S-down-mouse-1] 'rm-mouse-drag-region)
(autoload 'rm-set-mark "rect-mark"
  "Set mark for rectangle." t)
(autoload 'rm-exchange-point-and-mark "rect-mark"
  "Exchange point and mark for rectangle." t)
(autoload 'rm-kill-region "rect-mark"
  "Kill a rectangular region and save it in the kill ring." t)
(autoload 'rm-kill-ring-save "rect-mark"
  "Copy a rectangular region to the kill ring." t)
(autoload 'rm-mouse-drag-region "rect-mark"
  "Drag out a rectangular region with the mouse." t)

(put 'set-goal-column 'disabled nil)

;; useful macros define
;; mark current line
(fset 'mark-one-line
   [?\C-a ?\C-@ end])
(global-set-key "\C-c\C-m" 'mark-one-line)

; set default font
;;(set-default-font "-outline-Anonymous-normal-r-normal-normal-13-*-96-96-c-*-iso8859-1")

;; do not use vc-mode, it's too slow
(setq vc-handled-backends nil)

;; default make command
(setq compile-command "make -k")
(global-set-key (kbd "<f5>") 'compile)
(global-set-key (kbd "<f6>") 'recompile)
(global-set-key (kbd "<f8>") 'shell)

;(setq flow-control-c-s-replacement ?\035)
;(enable-flow-control)

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; melpa
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/"))
;(when (< emacs-major-version 24)
;  ;; For important compatibility libraries like cl-lib
;  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(add-to-list 'package-archives
	     '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)

;; golden-ratio
(require 'golden-ratio)
(golden-ratio-mode 1)

;; google c++ style check
(defun cpplint ()
  "check source code format according to Google Style Guide"
  (interactive)
  (compilation-start (concat "python ~/.lijie/cpplint.py " (buffer-file-name))))

;; 修改company-tooltips的前景色, 默认是黑色, 跟控制台背景重叠了
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-preview ((t (:foreground "darkgray" :underline t))))
 '(company-preview-common ((t (:inherit company-preview))))
 '(company-tooltip ((t (:background "lightgray" :foreground "black"))))
 '(company-tooltip-common ((((type x)) (:inherit company-tooltip :weight bold)) (t (:inherit company-tooltip))))
 '(company-tooltip-common-selection ((((type x)) (:inherit company-tooltip-selection :weight bold)) (t (:inherit company-tooltip-selection))))
 '(company-tooltip-selection ((t (:background "steelblue" :foreground "white")))))

;(custom-set-faces
; '(company-tooltip ((t (:foreground "white")))))

;; 在c/c++/objc下打开company-mode
(add-hook 'c++-mode-hook 'company-mode)
(add-hook 'c-mode-hook 'company-mode)
(add-hook 'objc-mode-hook 'company-mode)
(add-hook 'go-mode-hook 'company-mode)
	  
;; 加载irony-mode
;; (load "~/.lijie/irony.el")
;; (load "~/.lijie/irony-cdb.el")

;; 在c/c++/objc下打开irony-mode
;; (add-hook 'c++-mode-hook 'irony-mode)
;; (add-hook 'c-mode-hook 'irony-mode)
;; (add-hook 'objc-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))
(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; 将irony作为company的后端
;; (load "~/.lijie/company-irony.el")
;; (eval-after-load 'company
;;   '(add-to-list 'company-backends 'company-irony))

;; load company-go
;; (load "~/.lijie/company-go.el")

;; 将gocode作为company的后端
;; (eval-after-load 'company
;;   '(add-to-list 'company-backends 'company-go))

;; proxy for tencent dev env
;;(setq url-proxy-services '(("no_proxy" . "oa\\.com")
;;			   ("https" . "dev-proxy.oa.com:8080")
;;			   ("http" . "dev-proxy.oa.com:8080")))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

;; auto revert
(global-auto-revert-mode 1)

(setq clang-format-style-option "google")

;; === vertico start ===

;; Enable Vertico.
(use-package vertico
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  ;; (vertico-count 20) ;; Show more candidates
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; Emacs minibuffer configurations.
(use-package emacs
  :custom
  ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
  ;; to switch display modes.
  (context-menu-mode t)
  ;; Support opening new minibuffers from inside existing minibuffers.
  (enable-recursive-minibuffers t)
  ;; Hide commands in M-x which do not work in the current mode.  Vertico
  ;; commands are hidden in normal buffers. This setting is useful beyond
  ;; Vertico.
  (read-extended-command-predicate #'command-completion-default-include-p)
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt)))

;; Optionally use the `orderless' completion style.
(use-package orderless
  :custom
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

;; === vertico end ===


;; === consult start ===
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g r" . consult-grep-match)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Tweak the register preview for `consult-register-load',
  ;; `consult-register-store' and the built-in commands.  This improves the
  ;; register formatting, adds thin separator lines, register sorting and hides
  ;; the window mode line.
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
)
;; === consult end ===


;; === marginalia & embark start ===
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
  ;; available in the *Completions* buffer, add it to the
  ;; `completion-list-mode-map'.
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init section is always executed.
  :init

  ;; Marginalia must be activated in the :init section of use-package such that
  ;; the mode gets enabled right away. Note that this forces loading the
  ;; package.
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  ;; Add Embark to the mouse context menu. Also enable `context-menu-mode'.
  ;; (context-menu-mode 1)
  ;; (add-hook 'context-menu-functions #'embark-context-menu 100)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
;; === marginalia & embark end ===


;; === theme settings start ===
 (color-theme-sanityinc-tomorrow-night)
;; (load-theme 'doom-nova)
;; === theme settings end ===

(which-key-mode 1)
